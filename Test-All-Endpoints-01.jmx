<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9091</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="secretKey" elementType="Argument">
              <stringProp name="Argument.name">secretKey</stringProp>
              <stringProp name="Argument.value">appSecret</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get City">
          <stringProp name="HTTPSampler.path">/city</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.net.URL;
import java.time.Instant;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import org.apache.commons.codec.digest.DigestUtils;

URL url = sampler.getUrl();

String path = sampler.getPath();
String query = url.getQuery();

String timestamp = String.valueOf(Instant.now().toEpochMilli());

String timestampQuery = &quot;timestamp=&quot; + timestamp;

if (query != null &amp;&amp; !query.isEmpty()) {
	query += &quot;&amp;&quot; + timestampQuery;
} else {
	query = timestampQuery;
}

String secretKey = vars.get(&quot;secretKey&quot;);
String strToSign = secretKey;

strToSign += Stream.of(query.split(&quot;&amp;&quot;)).map(keyValue -&gt; keyValue.split(&quot;=&quot;)[0] + keyValue.split(&quot;=&quot;)[1]).sorted().collect(Collectors.joining(&quot;&quot;));
strToSign += secretKey;

log.info(&quot;The String To Sign Is: {}&quot;, strToSign);

String sign = DigestUtils.md5Hex(strToSign.getBytes(&quot;UTF-8&quot;));

String signQuery = &quot;sign=&quot; + sign;

if (path.contains(&quot;?&quot;)) {
	sampler.setPath(path + &quot;&amp;&quot; + timestampQuery + &quot;&amp;&quot; + signQuery);
} else {
	sampler.setPath(path + &quot;?&quot; + timestampQuery + &quot;&amp;&quot; + signQuery);
}
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion">
          <stringProp name="JSON_PATH">$.code</stringProp>
          <stringProp name="EXPECTED_VALUE">0</stringProp>
          <boolProp name="JSONVALIDATION">true</boolProp>
          <boolProp name="EXPECT_NULL">false</boolProp>
          <boolProp name="INVERT">false</boolProp>
          <boolProp name="ISREGEX">false</boolProp>
        </JSONPathAssertion>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post City">
          <stringProp name="HTTPSampler.path">/city</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;: &quot;Shanghai&quot;,&#xd;
	&quot;country&quot;: &quot;China&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.net.URL;
import java.time.Instant;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.jmeter.protocol.http.util.HTTPArgument;
import org.apache.jmeter.testelement.property.JMeterProperty;

URL url = sampler.getUrl();

String path = sampler.getPath();
String query = url.getQuery();

String timestamp = String.valueOf(Instant.now().toEpochMilli());

String timestampQuery = &quot;timestamp=&quot; + timestamp;

if (query != null &amp;&amp; !query.isEmpty()) {
	query += &quot;&amp;&quot; + timestampQuery;
} else {
	query = timestampQuery;
}

String httpMethod = sampler.getMethod();

String body = &quot;&quot;;

if(&quot;POST&quot;.equals(httpMethod)) {
	StringBuilder postBody = new StringBuilder();

	for(JMeterProperty jmeterProperty: sampler.getArguments()){
	    HTTPArgument arg = (HTTPArgument) jmeterProperty.getObjectValue();
	
	    postBody.append(arg.getEncodedValue());
	}
	
	body = postBody.toString();
}


String secretKey = vars.get(&quot;secretKey&quot;);
String strToSign = secretKey;

strToSign += Stream.of(query.split(&quot;&amp;&quot;)).map(keyValue -&gt; keyValue.split(&quot;=&quot;)[0] + keyValue.split(&quot;=&quot;)[1]).sorted().collect(Collectors.joining(&quot;&quot;));
strToSign += body;
strToSign += secretKey;

log.info(&quot;The String To Sign Is: {}&quot;, strToSign);
log.info(&quot;The Body Of The Request Is: {}&quot;, body);

String sign = DigestUtils.md5Hex(strToSign.getBytes(&quot;UTF-8&quot;));

String signQuery = &quot;sign=&quot; + sign;

if (path.contains(&quot;?&quot;)) {
	sampler.setPath(path + &quot;&amp;&quot; + timestampQuery + &quot;&amp;&quot; + signQuery);
} else {
	sampler.setPath(path + &quot;?&quot; + timestampQuery + &quot;&amp;&quot; + signQuery);
}
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
